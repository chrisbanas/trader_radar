/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_treemap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/treemap */ \"./src/scripts/treemap.js\");\n/* harmony import */ var _scripts_ticker_tape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/ticker_tape */ \"./src/scripts/ticker_tape.js\");\n/* harmony import */ var _scripts_time__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scripts/time */ \"./src/scripts/time.js\");\n/* harmony import */ var _scripts_title__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scripts/title */ \"./src/scripts/title.js\");\n/* harmony import */ var _scripts_searchbar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scripts/searchbar */ \"./src/scripts/searchbar.js\");\n\n(0,_scripts_treemap__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n\n(0,_scripts_ticker_tape__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n\n(0,_scripts_time__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n\n// Update the time every second\nsetInterval(_scripts_time__WEBPACK_IMPORTED_MODULE_2__[\"default\"], 1000);\n\n(0,_scripts_title__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n\n// import mainSearch from \"./scripts/searchbar\";\n// document.getElementById(\"search\").addEventListener(\"click\", function (event) {\n//     mainSearch(event);\n// });\n\n\n(0,_scripts_searchbar__WEBPACK_IMPORTED_MODULE_4__[\"default\"])();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRDO0FBQzVDQSw0REFBVyxFQUFFO0FBRWtDO0FBQy9DQyxnRUFBVSxFQUFFO0FBRTRCO0FBQ3hDQyx5REFBVSxFQUFFOztBQUVaO0FBQ0FDLFdBQVcsQ0FBQ0QscURBQVUsRUFBRSxJQUFJLENBQUM7QUFFYTtBQUMxQ0UsMERBQVcsRUFBRTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFOEM7QUFDOUNDLDhEQUFXLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90cmFkZXJfcmFkYXIvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWFpblRyZWVtYXAgZnJvbSBcIi4vc2NyaXB0cy90cmVlbWFwXCI7XG5tYWluVHJlZW1hcCgpXG5cbmltcG9ydCBtYWluVGlja2VyIGZyb20gXCIuL3NjcmlwdHMvdGlja2VyX3RhcGVcIjtcbm1haW5UaWNrZXIoKVxuXG5pbXBvcnQgdXBkYXRlVGltZSBmcm9tIFwiLi9zY3JpcHRzL3RpbWVcIjtcbnVwZGF0ZVRpbWUoKVxuXG4vLyBVcGRhdGUgdGhlIHRpbWUgZXZlcnkgc2Vjb25kXG5zZXRJbnRlcnZhbCh1cGRhdGVUaW1lLCAxMDAwKTtcblxuaW1wb3J0IHVwZGF0ZVRpdGxlIGZyb20gXCIuL3NjcmlwdHMvdGl0bGVcIjtcbnVwZGF0ZVRpdGxlKClcblxuLy8gaW1wb3J0IG1haW5TZWFyY2ggZnJvbSBcIi4vc2NyaXB0cy9zZWFyY2hiYXJcIjtcbi8vIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VhcmNoXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbi8vICAgICBtYWluU2VhcmNoKGV2ZW50KTtcbi8vIH0pO1xuXG5pbXBvcnQgc3RhcnRTZWFyY2ggZnJvbSBcIi4vc2NyaXB0cy9zZWFyY2hiYXJcIjtcbnN0YXJ0U2VhcmNoKClcbiJdLCJuYW1lcyI6WyJtYWluVHJlZW1hcCIsIm1haW5UaWNrZXIiLCJ1cGRhdGVUaW1lIiwic2V0SW50ZXJ2YWwiLCJ1cGRhdGVUaXRsZSIsInN0YXJ0U2VhcmNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/searchbar.js":
/*!**********************************!*\
  !*** ./src/scripts/searchbar.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ startSearch; }\n/* harmony export */ });\nconst apiKey = \"8660568d82eaea759bb0ec8e463033d2\";\nconst form = document.querySelector('form');\nconst input = document.querySelector('#input');\nconst clearButton = document.querySelector('#clear-button');\nconst searchButton = document.getElementById(\"search\");\n\n// ------------------------------------------------------------------------------------------------------\n\n// Pull the company profile data\nasync function performSearch(searchTerm) {\n  const apiUrl = `https://financialmodelingprep.com/api/v3/profile/${searchTerm}?apikey=${apiKey}`;\n  return await fetch(apiUrl).then(response => response.json()).then(data => {\n    const searchResults = JSON.stringify(data);\n    const searchResultsObj = JSON.parse(searchResults);\n    return searchResultsObj;\n  }).catch(error => {\n    console.error(error);\n    return error;\n  });\n}\n\n// Pull the company news data\nasync function getStockNews(tickers) {\n  const apiUrl = `https://financialmodelingprep.com/api/v3/stock_news?tickers=${tickers}&apikey=${apiKey}`;\n  return await fetch(apiUrl).then(response => response.json()).then(data => {\n    const searchResults = JSON.stringify(data);\n    const searchResultsObj = JSON.parse(searchResults);\n    return searchResultsObj;\n  }).catch(error => {\n    console.error(error);\n    return error;\n  });\n  ;\n}\n\n// get historical price for chart. Timeseries is for how many days we want to return\nasync function getHistoricalPrice(tickers) {\n  const timeRange = 180;\n  const apiUrl = `https://financialmodelingprep.com/api/v3/historical-price-full/${tickers}?timeseries=${timeRange}&apikey=${apiKey}`;\n  return await fetch(apiUrl).then(response => response.json()).then(data => {\n    const searchResults = JSON.stringify(data);\n    const searchResultsObj = JSON.parse(searchResults);\n    return searchResultsObj;\n  }).catch(error => {\n    console.error(error);\n    return error;\n  });\n  ;\n}\n\n// ------------------------------------------------------------------------------------------------------\n\n// Add a click event listener to the clear button\nclearButton.addEventListener('click', function () {\n  input.value = ''; // Clear the input value\n  // clear out the search\n  document.getElementById(\"search-results\").style.display = \"none\";\n  document.getElementById(\"candle-chart\").style.display = \"none\";\n  // redisplay the treemap\n  document.getElementById(\"filters\").style.display = \"flex\";\n  document.getElementById(\"description\").style.display = \"flex\";\n  document.getElementById(\"treemapcanvas\").style.display = \"flex\";\n  // remove the button from treemap display\n  clearButton.style.display = \"none\";\n});\nasync function startSearch() {\n  searchButton.addEventListener(\"click\", async function (searchHit) {\n    searchHit.preventDefault();\n    const input = document.getElementById(\"input\").value;\n    if (input.length < 1 || input.length > 5) {\n      alert('Please enter a correct stock ticker');\n      document.getElementById(\"input\").value = \"\"; // Reset the input field\n      return;\n    }\n    try {\n      const searchResultsObj = await performSearch(input);\n      if (searchResultsObj && searchResultsObj.length > 0) {\n        // Valid search results received\n        mainSearch(searchHit); // Perform mainSearch\n        // Display the clear button\n        clearButton.style.display = \"block\";\n      } else {\n        // Invalid search results or ticker not found\n        alert('Invalid stock ticker or ticker not found');\n        document.getElementById(\"input\").value = \"\"; // Reset the input field\n        // Hide the clear button\n        clearButton.style.display = \"none\";\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  });\n}\nasync function mainSearch(searchHit) {\n  searchHit.preventDefault(); // this is needed to prevent unwanted search\n\n  // get search query\n  const searchQuery = document.getElementById(\"input\").value;\n\n  // perform search and get company data\n  const companyData = await performSearch(searchQuery);\n\n  // perform search and get news data\n  const news = await getStockNews(searchQuery);\n  const limitedNews = news.slice(0, 5);\n\n  // fetch chart data check to see if there is already a chart if so clear then redisplay\n  const chartElement = document.getElementById(\"candle-chart\");\n  const historicalPrice = await getHistoricalPrice(searchQuery);\n  if (companyData.length === 0) {\n    document.getElementById(\"candle-chart\").style.display = \"none\";\n    // searchCompanyDataContainer.innerHTML = \"<p class='no-results'>No results found.</p>\";\n  }\n\n  if (chartElement) {\n    chartElement.remove();\n  }\n  drawCandlestickChart(historicalPrice.historical);\n\n  // clear out other elements on page\n  document.getElementById(\"filters\").style.display = \"none\";\n  document.getElementById(\"description\").style.display = \"none\";\n  document.getElementById(\"treemapcanvas\").style.display = \"none\";\n\n  // redisplay search\n  document.getElementById(\"search-results\").style.display = \"flex\";\n\n  // update search company data container with search results\n  const searchCompanyDataContainer = document.getElementById(\"search-results\");\n  searchCompanyDataContainer.innerHTML = \"\";\n\n  // display company data\n  const companyDataList = document.createElement(\"ul\");\n  companyDataList.classList.add(\"results-list\");\n\n  // Inside the news\n  const listItem = document.createElement(\"li\");\n  listItem.classList.add(\"result-item\");\n\n  // create logo and name element and style the div container\n  const logoAndName = document.createElement(\"div\");\n  logoAndName.style.display = \"flex\";\n  logoAndName.style.alignItems = \"center\";\n  logoAndName.style.justifyContent = \"center\";\n  logoAndName.style.padding = \"20px\";\n\n  // stule the company image\n  const logo = document.createElement(\"img\");\n  logo.style.marginRight = \"30px\";\n\n  // style the company name\n  const name = document.createElement(\"a\");\n  name.style.fontSize = \"20px\";\n  name.style.fontFamily = \"'Roboto Slab', serif\";\n  name.style.fontWeight = \"bold\";\n  name.style.marginRight = \"2px\";\n\n  // adding and appending html elements around the page for company profile\n  logoAndName.classList.add(\"logo-and-name\");\n  logo.src = companyData[0].image;\n  logo.classList.add(\"logo\");\n  name.href = companyData[0].website;\n  name.textContent = companyData[0].companyName;\n  name.classList.add(\"name\");\n  name.style.textDecoration = \"none\";\n  name.style.color = \"#000000\";\n  logoAndName.appendChild(logo);\n  logoAndName.appendChild(name);\n  listItem.appendChild(logoAndName);\n  name.addEventListener(\"mouseover\", () => {\n    name.style.textDecoration = \"underline\";\n  });\n  name.addEventListener(\"mouseout\", () => {\n    name.style.textDecoration = \"none\";\n  });\n\n  // create price and style\n  const price = document.createElement(\"div\");\n\n  // get the price change from yesterday\n  const priceChange = companyData[0].price - historicalPrice.historical[0].open;\n\n  // adding and appending the price html elements on the page\n  price.textContent = \"$\" + companyData[0].price;\n  price.classList.add(\"price\");\n\n  // add the up or down class based on price change\n  if (priceChange < 0) {\n    price.style.color = \"red\";\n  } else if (priceChange >= 0) {\n    price.style.color = \"green\";\n  }\n  listItem.appendChild(price);\n  companyDataList.appendChild(listItem);\n\n  // add news and style\n  const newsList = document.createElement(\"ul\");\n  newsList.style.fontFamily = \"'Roboto Slab', serif\";\n  newsList.style.fontWeight = \"bold\";\n  newsList.style.display = \"flex\";\n  newsList.style.alignItems = \"center\";\n  newsList.style.justifyContent = \"space-around\";\n  newsList.style.fontSize = \"15px\";\n  newsList.style.padding = \"20px\";\n  newsList.style.paddingRight = \"30px\";\n  newsList.style.paddingLeft = \"30px\";\n\n  // how the news list items are mapped and added to the HTML of the page\n  newsList.classList.add(\"news-list\");\n  for (const article of limitedNews) {\n    const newsItem = document.createElement(\"li\");\n    newsItem.classList.add(\"news-item\");\n    const title = document.createElement(\"a\");\n    title.href = article.url;\n    title.textContent = article.title;\n    title.classList.add(\"news-title\");\n    title.style.fontSize = '20px';\n    title.style.color = \"black\";\n    title.style.fontWeight = \"bold\";\n    title.style.textDecoration = \"none\";\n    // Add underline on hover\n    title.style.transition = \"text-decoration 0.3s\";\n    title.addEventListener(\"mouseover\", () => {\n      title.style.textDecoration = \"underline\";\n    });\n    title.addEventListener(\"mouseout\", () => {\n      title.style.textDecoration = \"none\";\n    });\n    const summary = document.createElement(\"p\");\n    summary.textContent = article.text;\n    summary.classList.add(\"news-summary\");\n    summary.style.fontSize = '13px';\n    const date = document.createElement(\"p\");\n    date.textContent = article.publishedDate.slice(0, 10);\n    date.classList.add(\"news-date\");\n    newsItem.appendChild(title);\n    newsItem.appendChild(summary);\n    newsItem.appendChild(date);\n    newsList.appendChild(newsItem);\n\n    // news item styles\n    // title.classList.style.marginBottom = \"10px\"\n    // newsList.style.marginRight = \"10px\"\n  }\n\n  listItem.appendChild(newsList);\n  companyDataList.appendChild(listItem);\n  searchCompanyDataContainer.appendChild(companyDataList);\n}\n\n// ------------------------------------------------------------------------------------------------------\n\n// draw the chart\nfunction drawCandlestickChart(data) {\n  // set the dimensions and margins of the graph\n  const margin = {\n    top: 65,\n    right: 20,\n    bottom: 90,\n    left: 100\n  };\n  const width = 1500 - margin.left - margin.right;\n  const height = 500 - margin.top - margin.bottom;\n\n  // set the ranges\n  const x = d3.scaleBand().range([0, width]).padding(0.2);\n  const y = d3.scaleLinear().range([height, 0]);\n\n  // create the svg element\n  const svg = d3.select(\"body\").append(\"svg\").attr(\"id\", \"candle-chart\") // Add the id attribute\n  .attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).style(\"background-color\", \"#f5f5f5\").append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  // add horizontal gridlines\n  svg.append(\"g\").attr(\"class\", \"grid\").call(d3.axisLeft(y).tickSize(-width).tickFormat(\"\"));\n\n  // add vertical gridlines\n  svg.append(\"g\").attr(\"class\", \"grid\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x).tickSize(-height).tickFormat(\"\"));\n\n  // format the data\n  const formatDate = d3.timeFormat(\"%m/%d\"); // Define date formatting\n\n  data.forEach(function (stock) {\n    stock.date = formatDate(new Date(stock.date));\n    stock.open = +stock.open;\n    stock.high = +stock.high;\n    stock.low = +stock.low;\n    stock.close = +stock.close;\n  });\n  console.log(data.slice(150, 180)); // log the first 30 entries\n\n  // reverse the order of the data array so it charts oldest on x0 and newest on x1\n  data.reverse();\n\n  // set the domains\n  x.domain(data.map(function (stock) {\n    return stock.date;\n  }));\n  y.domain([d3.min(data, function (stock) {\n    return stock.low;\n  }), d3.max(data, function (stock) {\n    return stock.high;\n  })]);\n\n  // draw the custom x axis with labels for every 30 days\n  svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x).tickValues(x.domain().filter(function (date, day) {\n    return day % 30 === 0;\n  }))).selectAll(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"x\", -9).attr(\"y\", 0).style(\"text-anchor\", \"end\");\n\n  // draw the x-axis label\n  svg.append(\"text\").attr(\"class\", \"x-axis-label\").attr(\"x\", width / 2).attr(\"y\", height + margin.bottom / 2).style(\"text-anchor\", \"middle\").text(\"Date\");\n\n  // draw the y axis\n  svg.append(\"g\").call(d3.axisLeft(y));\n\n  // draw the y-axis label\n  svg.append(\"text\").attr(\"class\", \"y-axis-label\").attr(\"x\", -height / 2).attr(\"y\", -margin.left / 2).attr(\"transform\", \"rotate(-90)\").style(\"text-anchor\", \"middle\").text(\"Price\");\n\n  // draw the candlesticks\n  svg.selectAll(\"rect\").data(data).enter().append(\"rect\").attr(\"x\", function (stock) {\n    return x(stock.date);\n  }).attr(\"y\", function (stock) {\n    return y(Math.max(stock.open, stock.close));\n  }).attr(\"width\", x.bandwidth()).attr(\"height\", function (stock) {\n    return y(Math.min(stock.open, stock.close)) - y(Math.max(stock.open, stock.close));\n  }).attr(\"fill\", function (stock) {\n    return stock.open > stock.close ? \"red\" : \"green\";\n  });\n\n  // Add lines for the wicks\n  svg.selectAll(\"line\").data(data).enter().append(\"line\").attr(\"x1\", function (stock) {\n    return x(stock.date) + x.bandwidth() / 2;\n  }).attr(\"y1\", function (stock) {\n    return y(stock.high);\n  }).attr(\"x2\", function (stock) {\n    return x(stock.date) + x.bandwidth() / 2;\n  }).attr(\"y2\", function (stock) {\n    return y(stock.low);\n  }).attr(\"stroke\", \"black\");\n\n  // add chart title\n  svg.append(\"text\").attr(\"class\", \"chart-subtitle\").attr(\"x\", width / 2).attr(\"y\", -margin.top / 2 + 25).style(\"text-anchor\", \"middle\").style(\"font-size\", \"16px\").text(\"180 Day Stock Prices\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/searchbar.js\n");

/***/ }),

/***/ "./src/scripts/ticker_tape.js":
/*!************************************!*\
  !*** ./src/scripts/ticker_tape.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ mainTicker; }\n/* harmony export */ });\nconst apiKey = \"8660568d82eaea759bb0ec8e463033d2\";\n\n// here is the main entry function\nasync function mainTicker() {\n  const indexSelector = document.getElementById(\"index\");\n  const defaultIndexValue = \"sp500\";\n  indexSelector.value = defaultIndexValue;\n  updateStockTicker(defaultIndexValue);\n  indexSelector.addEventListener(\"change\", async function () {\n    const indexValue = indexSelector.value;\n    updateStockTicker(indexValue);\n  });\n}\n\n// function to fetch stock data\nasync function fetchStockData(indexValue) {\n  const indexData = await fetch(`https://financialmodelingprep.com/api/v3/${indexValue}_constituent?apikey=${apiKey}`).then(response => response.json());\n  const symbols = indexData.map(stock => stock.symbol).join(',');\n  const quotesData = await fetch(`https://financialmodelingprep.com/api/v3/quote/${symbols}?apikey=${apiKey}`).then(response => response.json());\n\n  // Combine the index and quotes data to get all the stocks and their current prices\n  const stocksData = indexData.map(stock => {\n    const quoteData = quotesData.find(quote => quote.symbol === stock.symbol);\n    return {\n      symbol: stock.symbol,\n      changesPercentage: quoteData ? quoteData.changesPercentage : null,\n      price: quoteData ? quoteData.price : null\n    };\n  });\n\n  // Sort the array alphabetically by symbol\n  stocksData.sort((a, b) => a.symbol.localeCompare(b.symbol));\n  return stocksData;\n}\n\n// function to update the stock ticker\nasync function updateStockTicker(indexValue) {\n  const stocksData = await fetchStockData(indexValue);\n  const ticker = document.querySelector('#ticker');\n\n  // Clear the ticker\n  ticker.innerHTML = '';\n\n  // Add a <p> element for each stock\n  stocksData.forEach(stock => {\n    const p = document.createElement('p');\n    p.textContent = `${stock.symbol}: ${stock.price ? stock.price.toFixed(2) : 'N/A'}`; // display symbol and price with 2 decimal places\n\n    // Set the color based on the change percentage\n    if (stock.changesPercentage < 0) {\n      p.classList.add('negative');\n    } else if (stock.changesPercentage >= 0) {\n      p.classList.add('positive');\n    }\n    ticker.appendChild(p);\n  });\n\n  // Scroll the ticker to the left\n  setInterval(() => {\n    const ticker = document.querySelector('#ticker');\n    ticker.scrollLeft += 2; // adjust scroll\n  }, 100); // adjust scroll interval\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQ0ksU0FBUyxDQUFDQyxHQUFHLENBQUMsVUFBVSxDQUFDO0lBQy9CLENBQUMsTUFBTSxJQUFJdkIsS0FBSyxDQUFDUSxpQkFBaUIsSUFBSSxDQUFDLEVBQUU7TUFDckNVLENBQUMsQ0FBQ0ksU0FBUyxDQUFDQyxHQUFHLENBQUMsVUFBVSxDQUFDO0lBQy9CO0lBRUFULE1BQU0sQ0FBQ1UsV0FBVyxDQUFDTixDQUFDLENBQUM7RUFDekIsQ0FBQyxDQUFDOztFQUVGO0VBQ0FPLFdBQVcsQ0FBQyxNQUFNO0lBQ2QsTUFBTVgsTUFBTSxHQUFHN0IsUUFBUSxDQUFDOEIsYUFBYSxDQUFDLFNBQVMsQ0FBQztJQUNoREQsTUFBTSxDQUFDWSxVQUFVLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDNUIsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovL3RyYWRlcl9yYWRhci8uL3NyYy9zY3JpcHRzL3RpY2tlcl90YXBlLmpzPzVlZDAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXBpS2V5ID0gXCI4NjYwNTY4ZDgyZWFlYTc1OWJiMGVjOGU0NjMwMzNkMlwiO1xuXG4vLyBoZXJlIGlzIHRoZSBtYWluIGVudHJ5IGZ1bmN0aW9uXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBtYWluVGlja2VyKCkge1xuICAgIGNvbnN0IGluZGV4U2VsZWN0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImluZGV4XCIpO1xuICAgIGNvbnN0IGRlZmF1bHRJbmRleFZhbHVlID0gXCJzcDUwMFwiO1xuICAgIGluZGV4U2VsZWN0b3IudmFsdWUgPSBkZWZhdWx0SW5kZXhWYWx1ZTtcbiAgICB1cGRhdGVTdG9ja1RpY2tlcihkZWZhdWx0SW5kZXhWYWx1ZSk7XG5cbiAgICBpbmRleFNlbGVjdG9yLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBpbmRleFZhbHVlID0gaW5kZXhTZWxlY3Rvci52YWx1ZTtcbiAgICAgICAgdXBkYXRlU3RvY2tUaWNrZXIoaW5kZXhWYWx1ZSk7XG4gICAgfSk7XG59XG5cbi8vIGZ1bmN0aW9uIHRvIGZldGNoIHN0b2NrIGRhdGFcbmFzeW5jIGZ1bmN0aW9uIGZldGNoU3RvY2tEYXRhKGluZGV4VmFsdWUpIHtcbiAgICBjb25zdCBpbmRleERhdGEgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9maW5hbmNpYWxtb2RlbGluZ3ByZXAuY29tL2FwaS92My8ke2luZGV4VmFsdWV9X2NvbnN0aXR1ZW50P2FwaWtleT0ke2FwaUtleX1gKVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpO1xuICAgIGNvbnN0IHN5bWJvbHMgPSBpbmRleERhdGEubWFwKHN0b2NrID0+IHN0b2NrLnN5bWJvbCkuam9pbignLCcpO1xuICAgIGNvbnN0IHF1b3Rlc0RhdGEgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9maW5hbmNpYWxtb2RlbGluZ3ByZXAuY29tL2FwaS92My9xdW90ZS8ke3N5bWJvbHN9P2FwaWtleT0ke2FwaUtleX1gKVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpO1xuXG4gICAgLy8gQ29tYmluZSB0aGUgaW5kZXggYW5kIHF1b3RlcyBkYXRhIHRvIGdldCBhbGwgdGhlIHN0b2NrcyBhbmQgdGhlaXIgY3VycmVudCBwcmljZXNcbiAgICBjb25zdCBzdG9ja3NEYXRhID0gaW5kZXhEYXRhLm1hcChzdG9jayA9PiB7XG4gICAgICAgIGNvbnN0IHF1b3RlRGF0YSA9IHF1b3Rlc0RhdGEuZmluZChxdW90ZSA9PiBxdW90ZS5zeW1ib2wgPT09IHN0b2NrLnN5bWJvbCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzeW1ib2w6IHN0b2NrLnN5bWJvbCxcbiAgICAgICAgICAgIGNoYW5nZXNQZXJjZW50YWdlOiBxdW90ZURhdGEgPyBxdW90ZURhdGEuY2hhbmdlc1BlcmNlbnRhZ2UgOiBudWxsLFxuICAgICAgICAgICAgcHJpY2U6IHF1b3RlRGF0YSA/IHF1b3RlRGF0YS5wcmljZSA6IG51bGxcbiAgICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIFNvcnQgdGhlIGFycmF5IGFscGhhYmV0aWNhbGx5IGJ5IHN5bWJvbFxuICAgIHN0b2Nrc0RhdGEuc29ydCgoYSwgYikgPT4gYS5zeW1ib2wubG9jYWxlQ29tcGFyZShiLnN5bWJvbCkpO1xuXG4gICAgcmV0dXJuIHN0b2Nrc0RhdGE7XG59XG5cbi8vIGZ1bmN0aW9uIHRvIHVwZGF0ZSB0aGUgc3RvY2sgdGlja2VyXG5hc3luYyBmdW5jdGlvbiB1cGRhdGVTdG9ja1RpY2tlcihpbmRleFZhbHVlKSB7XG4gICAgY29uc3Qgc3RvY2tzRGF0YSA9IGF3YWl0IGZldGNoU3RvY2tEYXRhKGluZGV4VmFsdWUpO1xuICAgIGNvbnN0IHRpY2tlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0aWNrZXInKTtcblxuICAgIC8vIENsZWFyIHRoZSB0aWNrZXJcbiAgICB0aWNrZXIuaW5uZXJIVE1MID0gJyc7XG5cbiAgICAvLyBBZGQgYSA8cD4gZWxlbWVudCBmb3IgZWFjaCBzdG9ja1xuICAgIHN0b2Nrc0RhdGEuZm9yRWFjaChzdG9jayA9PiB7XG4gICAgICAgIGNvbnN0IHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgIHAudGV4dENvbnRlbnQgPSBgJHtzdG9jay5zeW1ib2x9OiAke3N0b2NrLnByaWNlID8gc3RvY2sucHJpY2UudG9GaXhlZCgyKSA6ICdOL0EnfWA7IC8vIGRpc3BsYXkgc3ltYm9sIGFuZCBwcmljZSB3aXRoIDIgZGVjaW1hbCBwbGFjZXNcblxuICAgICAgICAvLyBTZXQgdGhlIGNvbG9yIGJhc2VkIG9uIHRoZSBjaGFuZ2UgcGVyY2VudGFnZVxuICAgICAgICBpZiAoc3RvY2suY2hhbmdlc1BlcmNlbnRhZ2UgPCAwKSB7XG4gICAgICAgICAgICBwLmNsYXNzTGlzdC5hZGQoJ25lZ2F0aXZlJyk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RvY2suY2hhbmdlc1BlcmNlbnRhZ2UgPj0gMCkge1xuICAgICAgICAgICAgcC5jbGFzc0xpc3QuYWRkKCdwb3NpdGl2ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGlja2VyLmFwcGVuZENoaWxkKHApO1xuICAgIH0pO1xuXG4gICAgLy8gU2Nyb2xsIHRoZSB0aWNrZXIgdG8gdGhlIGxlZnRcbiAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRpY2tlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0aWNrZXInKTtcbiAgICAgICAgdGlja2VyLnNjcm9sbExlZnQgKz0gMjsgLy8gYWRqdXN0IHNjcm9sbFxuICAgIH0sIDEwMCk7IC8vIGFkanVzdCBzY3JvbGwgaW50ZXJ2YWxcbn1cbiJdLCJuYW1lcyI6WyJhcGlLZXkiLCJtYWluVGlja2VyIiwiaW5kZXhTZWxlY3RvciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJkZWZhdWx0SW5kZXhWYWx1ZSIsInZhbHVlIiwidXBkYXRlU3RvY2tUaWNrZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiaW5kZXhWYWx1ZSIsImZldGNoU3RvY2tEYXRhIiwiaW5kZXhEYXRhIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJqc29uIiwic3ltYm9scyIsIm1hcCIsInN0b2NrIiwic3ltYm9sIiwiam9pbiIsInF1b3Rlc0RhdGEiLCJzdG9ja3NEYXRhIiwicXVvdGVEYXRhIiwiZmluZCIsInF1b3RlIiwiY2hhbmdlc1BlcmNlbnRhZ2UiLCJwcmljZSIsInNvcnQiLCJhIiwiYiIsImxvY2FsZUNvbXBhcmUiLCJ0aWNrZXIiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJIVE1MIiwiZm9yRWFjaCIsInAiLCJjcmVhdGVFbGVtZW50IiwidGV4dENvbnRlbnQiLCJ0b0ZpeGVkIiwiY2xhc3NMaXN0IiwiYWRkIiwiYXBwZW5kQ2hpbGQiLCJzZXRJbnRlcnZhbCIsInNjcm9sbExlZnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scripts/ticker_tape.js\n");

/***/ }),

/***/ "./src/scripts/time.js":
/*!*****************************!*\
  !*** ./src/scripts/time.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ updateTime; }\n/* harmony export */ });\nfunction updateTime() {\n  let options = {\n    weekday: 'short',\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n    second: '2-digit',\n    timeZone: 'America/New_York'\n  };\n  let dt = new Date();\n  let dateTimeString = dt.toLocaleString('en-US', options);\n  dateTimeString = dateTimeString.replace(/([A-Z]+) Standard Time$/, '$1');\n\n  // Calculate time left until the market opens or closes\n  let openTime = new Date(Date.UTC(dt.getFullYear(), dt.getMonth(), dt.getDate(), 13, 30, 0)); // Market opens at 9:30 AM EST (which is 1:30 PM UTC)\n  let closeTime = new Date(Date.UTC(dt.getFullYear(), dt.getMonth(), dt.getDate(), 20, 0, 0)); // Market closes at 4:00 PM EST (which is 8:00 PM UTC)\n  let timeDiff = openTime - dt;\n  let timeLeft = '';\n  if (timeDiff > 0) {\n    // Market is not open yet\n    timeLeft = Math.floor(timeDiff / 1000 / 60 / 60) + ' hr ' + Math.floor(timeDiff / 1000 / 60 % 60) + ' min until open';\n  } else if (dt < closeTime) {\n    // Market is open\n    timeDiff = closeTime - dt;\n    timeLeft = Math.floor(timeDiff / 1000 / 60 / 60) + ' hr ' + Math.floor(timeDiff / 1000 / 60 % 60) + ' min until close';\n  } else {\n    // Market is closed\n    timeLeft = 'Market is closed';\n  }\n  let nyTime = new Date().toLocaleString(\"en-US\", {\n    timeZone: \"America/New_York\"\n  });\n  let nyHour = new Date(nyTime).getHours();\n  if (nyHour >= 9 && nyHour < 16) {\n    // Market is open - set text color to green\n    dateTimeString += ' EST  |  ' + timeLeft;\n    document.getElementById(\"datetime\").style.color = \"green\";\n  } else {\n    // Market is closed - set text color to red\n    dateTimeString += ' EST  |  ' + timeLeft;\n    document.getElementById(\"datetime\").style.color = \"red\";\n  }\n  document.getElementById(\"datetime\").innerHTML = dateTimeString;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWMsQ0FBQyxVQUFVLENBQUMsQ0FBQ0MsS0FBSyxDQUFDQyxLQUFLLEdBQUcsS0FBSztFQUMzRDtFQUVBSCxRQUFRLENBQUNDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQ0csU0FBUyxHQUFHcEIsY0FBYztBQUNsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3RyYWRlcl9yYWRhci8uL3NyYy9zY3JpcHRzL3RpbWUuanM/ZjJiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVUaW1lKCkge1xuICAgIGxldCBvcHRpb25zID0ge1xuICAgICAgICB3ZWVrZGF5OiAnc2hvcnQnLFxuICAgICAgICBtb250aDogJ3Nob3J0JyxcbiAgICAgICAgZGF5OiAnbnVtZXJpYycsXG4gICAgICAgIHllYXI6ICdudW1lcmljJyxcbiAgICAgICAgaG91cjogJ251bWVyaWMnLFxuICAgICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgICAgc2Vjb25kOiAnMi1kaWdpdCcsXG4gICAgICAgIHRpbWVab25lOiAnQW1lcmljYS9OZXdfWW9yaycsXG4gICAgfTtcblxuICAgIGxldCBkdCA9IG5ldyBEYXRlKCk7XG4gICAgbGV0IGRhdGVUaW1lU3RyaW5nID0gZHQudG9Mb2NhbGVTdHJpbmcoJ2VuLVVTJywgb3B0aW9ucyk7XG4gICAgZGF0ZVRpbWVTdHJpbmcgPSBkYXRlVGltZVN0cmluZy5yZXBsYWNlKC8oW0EtWl0rKSBTdGFuZGFyZCBUaW1lJC8sICckMScpO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRpbWUgbGVmdCB1bnRpbCB0aGUgbWFya2V0IG9wZW5zIG9yIGNsb3Nlc1xuICAgIGxldCBvcGVuVGltZSA9IG5ldyBEYXRlKERhdGUuVVRDKGR0LmdldEZ1bGxZZWFyKCksIGR0LmdldE1vbnRoKCksIGR0LmdldERhdGUoKSwgMTMsIDMwLCAwKSk7IC8vIE1hcmtldCBvcGVucyBhdCA5OjMwIEFNIEVTVCAod2hpY2ggaXMgMTozMCBQTSBVVEMpXG4gICAgbGV0IGNsb3NlVGltZSA9IG5ldyBEYXRlKERhdGUuVVRDKGR0LmdldEZ1bGxZZWFyKCksIGR0LmdldE1vbnRoKCksIGR0LmdldERhdGUoKSwgMjAsIDAsIDApKTsgLy8gTWFya2V0IGNsb3NlcyBhdCA0OjAwIFBNIEVTVCAod2hpY2ggaXMgODowMCBQTSBVVEMpXG4gICAgbGV0IHRpbWVEaWZmID0gb3BlblRpbWUgLSBkdDtcbiAgICBsZXQgdGltZUxlZnQgPSAnJztcblxuICAgIGlmICh0aW1lRGlmZiA+IDApIHsgLy8gTWFya2V0IGlzIG5vdCBvcGVuIHlldFxuICAgICAgICB0aW1lTGVmdCA9IE1hdGguZmxvb3IodGltZURpZmYgLyAxMDAwIC8gNjAgLyA2MCkgKyAnIGhyICcgKyBNYXRoLmZsb29yKCh0aW1lRGlmZiAvIDEwMDAgLyA2MCkgJSA2MCkgKyAnIG1pbiB1bnRpbCBvcGVuJztcbiAgICB9IGVsc2UgaWYgKGR0IDwgY2xvc2VUaW1lKSB7IC8vIE1hcmtldCBpcyBvcGVuXG4gICAgICAgIHRpbWVEaWZmID0gY2xvc2VUaW1lIC0gZHQ7XG4gICAgICAgIHRpbWVMZWZ0ID0gTWF0aC5mbG9vcih0aW1lRGlmZiAvIDEwMDAgLyA2MCAvIDYwKSArICcgaHIgJyArIE1hdGguZmxvb3IoKHRpbWVEaWZmIC8gMTAwMCAvIDYwKSAlIDYwKSArICcgbWluIHVudGlsIGNsb3NlJztcbiAgICB9IGVsc2UgeyAvLyBNYXJrZXQgaXMgY2xvc2VkXG4gICAgICAgIHRpbWVMZWZ0ID0gJ01hcmtldCBpcyBjbG9zZWQnO1xuICAgIH1cblxuICAgIGxldCBueVRpbWUgPSBuZXcgRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKFwiZW4tVVNcIiwge3RpbWVab25lOiBcIkFtZXJpY2EvTmV3X1lvcmtcIn0pO1xuICAgIGxldCBueUhvdXIgPSBuZXcgRGF0ZShueVRpbWUpLmdldEhvdXJzKCk7XG5cbiAgICBpZiAobnlIb3VyID49IDkgJiYgbnlIb3VyIDwgMTYpIHtcbiAgICAgICAgLy8gTWFya2V0IGlzIG9wZW4gLSBzZXQgdGV4dCBjb2xvciB0byBncmVlblxuICAgICAgICBkYXRlVGltZVN0cmluZyArPSAnIEVTVCAgfCAgJyArIHRpbWVMZWZ0O1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRhdGV0aW1lXCIpLnN0eWxlLmNvbG9yID0gXCJncmVlblwiO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1hcmtldCBpcyBjbG9zZWQgLSBzZXQgdGV4dCBjb2xvciB0byByZWRcbiAgICAgICAgZGF0ZVRpbWVTdHJpbmcgKz0gJyBFU1QgIHwgICcgKyB0aW1lTGVmdDtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkYXRldGltZVwiKS5zdHlsZS5jb2xvciA9IFwicmVkXCI7XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkYXRldGltZVwiKS5pbm5lckhUTUwgPSBkYXRlVGltZVN0cmluZztcbn1cbiJdLCJuYW1lcyI6WyJ1cGRhdGVUaW1lIiwib3B0aW9ucyIsIndlZWtkYXkiLCJtb250aCIsImRheSIsInllYXIiLCJob3VyIiwibWludXRlIiwic2Vjb25kIiwidGltZVpvbmUiLCJkdCIsIkRhdGUiLCJkYXRlVGltZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwicmVwbGFjZSIsIm9wZW5UaW1lIiwiVVRDIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJjbG9zZVRpbWUiLCJ0aW1lRGlmZiIsInRpbWVMZWZ0IiwiTWF0aCIsImZsb29yIiwibnlUaW1lIiwibnlIb3VyIiwiZ2V0SG91cnMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwic3R5bGUiLCJjb2xvciIsImlubmVySFRNTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/time.js\n");

/***/ }),

/***/ "./src/scripts/title.js":
/*!******************************!*\
  !*** ./src/scripts/title.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ updateTitle; }\n/* harmony export */ });\nasync function updateTitle() {\n  const indexSelector = document.getElementById(\"index\");\n  const sizeSelector = document.getElementById(\"size-by\");\n  const titleElement = document.getElementById('description');\n  const defaultIndexValue = \"sp500\";\n  const defaultSizeValue = \"marketCap\";\n  indexSelector.value = defaultIndexValue;\n  sizeSelector.value = defaultSizeValue;\n\n  // this is for the select index dropdown\n  function updateTitleFromIndex() {\n    const indexValue = indexSelector.value;\n    const sizeValue = sizeSelector.value;\n    return indexValue === \"sp500\" && sizeValue === \"marketCap\" ? titleElement.innerText = \"S&P 500 index stocks categorized by industries. Size represents market cap.\" : indexValue === \"sp500\" && sizeValue === \"volume\" ? titleElement.innerText = \"S&P 500 index stocks categorized by industries. Size represents volume.\" : indexValue === \"sp500\" && sizeValue === \"avgVolume\" ? titleElement.innerText = \"S&P 500 index stocks categorized by industries. Size represents average volume.\" : indexValue === \"sp500\" && sizeValue === \"sharesOutstanding\" ? titleElement.innerText = \"S&P 500 index stocks categorized by industries. Size represents shares outstanding.\" : indexValue === \"dowjones\" && sizeValue === \"marketCap\" ? titleElement.innerText = \"Dow Jones index stocks categorized by industries. Size represents market cap.\" : indexValue === \"dowjones\" && sizeValue === \"volume\" ? titleElement.innerText = \"Dow Jones index stocks categorized by industries. Size represents volume.\" : indexValue === \"dowjones\" && sizeValue === \"avgVolume\" ? titleElement.innerText = \"Dow Jones index stocks categorized by industries. Size represents average volume.\" : indexValue === \"dowjones\" && sizeValue === \"sharesOutstanding\" ? titleElement.innerText = \"Dow Jones index stocks categorized by industries. Size represents shares outstanding.\" : indexValue === \"nasdaq\" && sizeValue === \"marketCap\" ? titleElement.innerText = \"NASDAQ index stocks categorized by industries. Size represents market cap.\" : indexValue === \"nasdaq\" && sizeValue === \"volume\" ? titleElement.innerText = \"NASDAQ index stocks categorized by industries. Size represents volume.\" : indexValue === \"nasdaq\" && sizeValue === \"avgVolume\" ? titleElement.innerText = \"NASDAQ index stocks categorized by industries. Size represents average volume.\" : indexValue === \"nasdaq\" && sizeValue === \"sharesOutstanding\" ? titleElement.innerText = \"NASDAQ index stocks categorized by industries. Size represents shares outstanding.\" : titleElement.innerText = `${indexValue} index stocks categorized by industries. Size represents ${sizeValue}.`;\n  }\n\n  // this is for the select size-by dropdown\n  function updateTitleFromSize() {\n    const sizeValue = sizeSelector.value;\n    const indexValue = indexSelector.value;\n    return indexValue === \"sp500\" && sizeValue === \"marketCap\" ? titleElement.innerText = \"S&P 500 index stocks categorized by industries. Size represents market cap.\" : indexValue === \"sp500\" && sizeValue === \"volume\" ? titleElement.innerText = \"S&P 500 index stocks categorized by industries. Size represents volume.\" : indexValue === \"sp500\" && sizeValue === \"avgVolume\" ? titleElement.innerText = \"S&P 500 index stocks categorized by industries. Size represents average volume.\" : indexValue === \"sp500\" && sizeValue === \"sharesOutstanding\" ? titleElement.innerText = \"S&P 500 index stocks categorized by industries. Size represents shares outstanding.\" : indexValue === \"dowjones\" && sizeValue === \"marketCap\" ? titleElement.innerText = \"Dow Jones index stocks categorized by industries. Size represents market cap.\" : indexValue === \"dowjones\" && sizeValue === \"volume\" ? titleElement.innerText = \"Dow Jones index stocks categorized by industries. Size represents volume.\" : indexValue === \"dowjones\" && sizeValue === \"avgVolume\" ? titleElement.innerText = \"Dow Jones index stocks categorized by industries. Size represents average volume.\" : indexValue === \"dowjones\" && sizeValue === \"sharesOutstanding\" ? titleElement.innerText = \"Dow Jones index stocks categorized by industries. Size represents shares outstanding.\" : indexValue === \"nasdaq\" && sizeValue === \"marketCap\" ? titleElement.innerText = \"NASDAQ index stocks categorized by industries. Size represents market cap.\" : indexValue === \"nasdaq\" && sizeValue === \"volume\" ? titleElement.innerText = \"NASDAQ index stocks categorized by industries. Size represents volume.\" : indexValue === \"nasdaq\" && sizeValue === \"avgVolume\" ? titleElement.innerText = \"NASDAQ index stocks categorized by industries. Size represents average volume.\" : indexValue === \"nasdaq\" && sizeValue === \"sharesOutstanding\" ? titleElement.innerText = \"NASDAQ index stocks categorized by industries. Size represents shares outstanding.\" : titleElement.innerText = `${indexValue} index stocks categorized by industries. Size represents ${sizeValue}.`;\n  }\n\n  // call the event listener functions to set the default title text\n  updateTitleFromIndex();\n  updateTitleFromSize();\n  indexSelector.addEventListener(\"change\", updateTitleFromIndex);\n  sizeSelector.addEventListener(\"change\", updateTitleFromSize);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/title.js\n");

/***/ }),

/***/ "./src/scripts/treemap.js":
/*!********************************!*\
  !*** ./src/scripts/treemap.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ mainTreemap; }\n/* harmony export */ });\nconst apiKey = \"8660568d82eaea759bb0ec8e463033d2\";\nlet canvas = d3.select('#treemapcanvas');\nconst clearButton = document.querySelector('#clear-button');\n\n// here is the main entry function\nasync function mainTreemap() {\n  const indexSelector = document.getElementById(\"index\");\n  const sizeSelector = document.getElementById(\"size-by\");\n  const defaultIndexValue = \"sp500\";\n  const defaultSizeValue = \"marketCap\";\n  indexSelector.value = defaultIndexValue;\n  sizeSelector.value = defaultSizeValue;\n  const stockDataArray = await fetchStockData(defaultIndexValue);\n  const root = getStockTreeMapRoot(stockDataArray);\n  drawTreeMap(root, defaultSizeValue);\n\n  // this is for the select index dropdown\n  indexSelector.addEventListener(\"change\", async function () {\n    const indexValue = indexSelector.value;\n    const sizeValue = sizeSelector.value;\n    const stockDataArray = await fetchStockData(indexValue);\n    const root = getStockTreeMapRoot(stockDataArray);\n    drawStockTreeMap(root, sizeValue);\n  });\n\n  // this is for the select size-by dropdown\n  sizeSelector.addEventListener(\"change\", async function () {\n    const sizeValue = sizeSelector.value;\n    const indexValue = indexSelector.value;\n    const stockDataArray = await fetchStockData(indexValue);\n    const root = getStockTreeMapRoot(stockDataArray);\n    drawStockTreeMap(root, sizeValue);\n  });\n}\n\n// function to fetch stock data\nasync function fetchStockData(indexValue) {\n  const indexData = await fetch(`https://financialmodelingprep.com/api/v3/${indexValue}_constituent?apikey=${apiKey}`).then(response => response.json());\n  const symbols = indexData.map(stock => stock.symbol).join(',');\n  const quotesData = await fetch(`https://financialmodelingprep.com/api/v3/quote/${symbols}?apikey=${apiKey}`).then(response => response.json());\n  const stockDataMap = {};\n  indexData.forEach(stock => {\n    stockDataMap[stock.symbol] = {\n      name: stock.symbol,\n      sector: stock.sector,\n      fullName: stock.name,\n      subSector: stock.subSector,\n      marketCap: quotesData.find(quote => quote.symbol === stock.symbol).marketCap,\n      changesPercentage: quotesData.find(quote => quote.symbol === stock.symbol).changesPercentage,\n      volume: quotesData.find(quote => quote.symbol === stock.symbol).volume,\n      avgVolume: quotesData.find(quote => quote.symbol === stock.symbol).avgVolume,\n      sharesOutstanding: quotesData.find(quote => quote.symbol === stock.symbol).sharesOutstanding,\n      price: quotesData.find(quote => quote.symbol === stock.symbol).price,\n      changeValue: quotesData.find(quote => quote.symbol === stock.symbol).change,\n      dayLow: quotesData.find(quote => quote.symbol === stock.symbol).dayLow,\n      dayHigh: quotesData.find(quote => quote.symbol === stock.symbol).dayHigh,\n      yearHigh: quotesData.find(quote => quote.symbol === stock.symbol).yearHigh,\n      yearLow: quotesData.find(quote => quote.symbol === stock.symbol).yearLow,\n      priceAvg50: quotesData.find(quote => quote.symbol === stock.symbol).priceAvg50,\n      priceAvg200: quotesData.find(quote => quote.symbol === stock.symbol).priceAvg200,\n      open: quotesData.find(quote => quote.symbol === stock.symbol).open,\n      previousClose: quotesData.find(quote => quote.symbol === stock.symbol).previousClose,\n      eps: quotesData.find(quote => quote.symbol === stock.symbol).eps,\n      pe: quotesData.find(quote => quote.symbol === stock.symbol).pe\n    };\n  });\n  return Object.values(stockDataMap);\n}\n\n// function to get stock root for treemap\nfunction getStockTreeMapRoot(stockDataArray) {\n  const root = {\n    name: \"stock\",\n    children: []\n  };\n  const sectors = {};\n  stockDataArray.forEach(stock => {\n    const sector = stock.sector;\n    if (!sectors[sector]) {\n      sectors[sector] = {\n        name: sector,\n        children: []\n      };\n    }\n    sectors[sector].children.push(stock);\n  });\n  Object.values(sectors).forEach(sector => {\n    root.children.push(sector);\n  });\n  return root;\n}\n\n// function to draw the trees\nfunction drawStockTreeMap(root, defaultSizeValue) {\n  d3.selectAll('g').remove();\n  drawTreeMap(root, defaultSizeValue);\n}\n\n// ↑ this is the data api pull and format for the draw treemap\n//-------------------------------------------------------------------------------------------------------------\n// ↓ this is the draw treemap which creates the treemap for display\n\n//function to draw the treemap\nlet drawTreeMap = (stockData, size) => {\n  // removes the clear button from the treemap page\n  clearButton.style.display = \"none\";\n\n  // sorts the hierarchy so that the largest marketcap stocks are at the top\n  let hierarchy = d3.hierarchy(stockData, node => {\n    return node['children'];\n  }).sum(node => {\n    return node[size];\n  }).sort((node1, node2) => {\n    return node2['value'] - node1['value']; // this has to be set to value and not marketCap as the hierarcy fucntion is renaming it value\n  });\n  // .size is the size of our canvas in the scss file\n  let generateTreeMap = d3.treemap().tile(d3.treemapBinary).size([canvas.node().clientWidth, canvas.node().clientHeight]).paddingOuter(7).paddingTop(43).paddingInner(2).round(true);\n\n  // this uses d3 to generate the treemap\n  generateTreeMap(hierarchy);\n  let stockTiles = hierarchy.leaves();\n\n  // create a new div for the details when mouse over\n  let detailsDiv = d3.select('body').append('div').attr('class', 'details').style('display', 'none');\n\n  // creates g elements inside the canvas. g elements are group tags. and sets the size of the element to an x and y axias. Click and mouseover events are defined here\n  let block = canvas.selectAll('g').data(stockTiles).enter().append('g').attr('transform', stock => {\n    return 'translate(' + stock['x0'] + ', ' + stock['y0'] + ')';\n  }).each(function (stock) {\n    // Save the original transform of the group element. Used in the popup\n    d3.select(this).attr('data-original-transform', d3.select(this).attr('transform'));\n    d3.select(this).attr('data-name', stock['data']['name']);\n    d3.select(this).attr('data-fullName', stock['data']['fullName']);\n    d3.select(this).attr('data-marketCap', stock['data']['marketCap'].toLocaleString('en-US'));\n    d3.select(this).attr('data-price', stock['data']['price'].toFixed(2));\n    d3.select(this).attr('data-changeValue', stock['data']['changeValue'].toFixed(2));\n    d3.select(this).attr('data-changesPercentage', stock['data']['changesPercentage'].toFixed(2));\n    d3.select(this).attr('data-dayLow', stock['data']['dayLow'].toFixed(2));\n    d3.select(this).attr('data-dayHigh', stock['data']['dayHigh'].toFixed(2));\n    d3.select(this).attr('data-yearHigh', stock['data']['yearHigh'].toFixed(2));\n    d3.select(this).attr('data-yearLow', stock['data']['yearLow'].toFixed(2));\n    d3.select(this).attr('data-priceAvg50', stock['data']['priceAvg50'].toFixed(2));\n    d3.select(this).attr('data-priceAvg200', stock['data']['priceAvg200'].toFixed(2));\n    d3.select(this).attr('data-open', stock['data']['open'].toFixed(2));\n    d3.select(this).attr('data-previousClose', stock['data']['previousClose'].toFixed(2));\n    d3.select(this).attr('data-eps', stock['data']['eps'].toFixed(2));\n    d3.select(this).attr('data-pe', stock['data']['pe'].toFixed(2));\n    d3.select(this).attr('data-x0', stock['x0'] + 27); // use this to set the postion of the popup\n    d3.select(this).attr('data-y0', stock['y0'] + 20); // use this to set the postion of the popup\n    d3.select(this).attr('data-x0', stock['x1'] + 40); // use this to set the postion of the popup\n    d3.select(this).attr('data-y0', stock['y1']); // use this to set the postion of the popup\n\n    // Calculate the scaling factor based on the area of the tile. This is used in the click/zoom\n    let area = (stock['x1'] - stock['x0']) * (stock['y1'] - stock['y0']);\n    let scale = Math.sqrt(160000 / area);\n    d3.select(this).attr('data-scale', scale);\n  })\n\n  // hover over function that displays stock info\n  .on('mouseover', function (stock) {\n    detailsDiv.html(`<strong>${d3.select(this).attr('data-fullName')}</strong>\n        <br>\n        <br>\n        Ticker: ${d3.select(this).attr('data-name')}\n        <br>\n        Market Cap: ${d3.select(this).attr('data-marketCap')}\n        <br>\n        Price: ${d3.select(this).attr('data-price')}\n        <br>\n        Change: ${d3.select(this).attr('data-changeValue')}\n        <br>\n        Change %: ${d3.select(this).attr('data-changesPercentage')}%\n        <br>\n        Low: ${d3.select(this).attr('data-dayLow')}\n        <br>\n        High: ${d3.select(this).attr('data-dayHigh')}\n        <br>\n        Open: ${d3.select(this).attr('data-open')}\n        <br>\n        Previous Close: ${d3.select(this).attr('data-previousClose')}\n        <br>\n        Yr High: ${d3.select(this).attr('data-yearHigh')}\n        <br>\n        Yr Low: ${d3.select(this).attr('data-yearLow')}\n        <br>\n        50 Day Avg: ${d3.select(this).attr('data-priceAvg50')}\n        <br>\n        200 Day Avg: ${d3.select(this).attr('data-priceAvg200')}\n        <br>\n        EPS: ${d3.select(this).attr('data-eps')}\n        <br>\n        PE: ${d3.select(this).attr('data-pe')}\n        `);\n    // This is where you can style the popup on mouseover\n    detailsDiv.style('display', 'block').style('padding', '10px').style('background-color', 'rgba(0, 0, 0, 0.9)') // Set the background color with 90% transparency\n    .style('color', 'white').style('border', '1px solid #ccc').style('border-radius', '5px').style(\"font-size\", \"16px\").style(\"font-family\", \"'Roboto Slab', serif\").style('box-shadow', '0px 0px 5px rgba(0, 0, 0, 0.1)').style('left', d3.select(this).attr('data-x0') + 'px').style('top', d3.select(this).attr('data-y0') + 'px');\n  }).on('mouseout', function () {\n    detailsDiv.style('display', 'none');\n    d3.select(this).select('.hover-text').remove();\n  })\n\n  // click function that pulls a stock to the middle of the screen\n  .on('click', function (stock) {\n    let originalTransform = d3.select(this).attr('data-original-transform');\n    let scale = d3.select(this).attr('data-scale');\n\n    // Move the selected block to the end of the canvas (in terms of rendering order). This puts it in the absolute front.\n    let node = d3.select(this).node();\n    node.parentNode.appendChild(node);\n\n    // If the tile has not been selected yet, color it and zoom in\n    if (d3.select(this).classed('selected') === false) {\n      // Color the selected tile\n      d3.select(this).select('rect').transition().duration(750).style('fill', 'orange');\n\n      // Get the size of the treemap canvas\n      let canvasWidth = d3.select('#treemapcanvas').node().clientWidth;\n      let canvasHeight = d3.select('#treemapcanvas').node().clientHeight;\n\n      // Get the size of the selected tile\n      let tileWidth = d3.select(this).node().getBoundingClientRect().width;\n      let tileHeight = d3.select(this).node().getBoundingClientRect().height;\n\n      // Calculate the center coordinates of the canvas\n      let canvasCenterX = canvasWidth / 2;\n      let canvasCenterY = canvasHeight / 2;\n\n      // Calculate the center coordinates of the selected tile\n      let tileCenterX = tileWidth / 2;\n      let tileCenterY = tileHeight / 2;\n\n      // Calculate the translation needed to center the tile within the canvas\n      let translateX = canvasCenterX - tileCenterX;\n      let translateY = canvasCenterY - tileCenterY;\n\n      // Scale the selected block by a factor based on the area of the tile\n      d3.select(this).each(function () {\n        // Store the original fill color of the rect\n        const rect = d3.select(this).select('rect');\n        rect.attr('data-original-fill', rect.style('fill'));\n      }).transition().duration(750).attr('transform', `translate(${translateX},${translateY}) scale(${scale})`);\n      d3.select(this).classed('selected', true);\n    }\n    // If the tile has already been selected, un-color it and zoom out\n    else {\n      // Un-color the tile\n      d3.select(this).select('rect').transition().duration(750).style('fill', function () {\n        // Retrieve the original fill color of the rect\n        return d3.select(this).attr('data-original-fill');\n      });\n      // Reset the tile to its original size and position\n      d3.select(this).transition().duration(750).attr('transform', originalTransform);\n      d3.select(this).classed('selected', false);\n    }\n  });\n\n  // all g elements now have a class called tile, and color has been set to each category. These will turn into market sectors\n  block.append('rect').attr('class', 'tile')\n  // this is where we can set the fill color by daily percentage change\n  .attr(\"fill\", stock => {\n    return stock['data']['changesPercentage'] < -3 ? '#f63538' : stock['data']['changesPercentage'] < -2 ? '#bf4045' : stock['data']['changesPercentage'] < -1 ? '#f77c80' : stock['data']['changesPercentage'] > -1 && stock['data']['changesPercentage'] < 0 ? '#f77c80' : stock['data']['changesPercentage'] < 1 ? '#42bd7f' : stock['data']['changesPercentage'] < 2 ? '#2f9e4f' : stock['data']['changesPercentage'] < 3 ? '#35764e' : '#35764e';\n  }).attr(\"data-name\", stock => {\n    return stock['data']['name'];\n  }).attr('data-sector', stock => {\n    return stock['data']['sector'];\n  }).attr(`data-${size}`, stock => {\n    return stock[\"data\"][size];\n  }).attr('width', stock => {\n    return stock['x1'] - stock['x0'];\n  }).attr('height', stock => {\n    return stock['y1'] - stock['y0'];\n  });\n\n  // this resets the text so that we can re-render the titles. This must be above all block.append text or it will break\n  canvas.selectAll(\"text\").remove();\n\n  // title feature for each sector\n  canvas.selectAll(\"titles\").data(hierarchy.children).enter().append(\"text\").attr('class', 'title').attr(\"x\", sector => sector.x0 + (sector.x1 - sector.x0) / 2).attr(\"y\", sector => sector.y0 + 30).text(function (sector) {\n    return sector.data.name;\n  }).attr(\"font-size\", \"19px\").style(\"fill\", \"white\").each(function (sector) {\n    const text = d3.select(this);\n    const bbox = text.node().getBBox();\n    const maxWidth = sector.x1 - sector.x0 - 14; // 14 is the left and right padding\n\n    // Shrink font size if the title exceeds the container's width\n    const fontSize = parseInt(text.attr(\"font-size\"), 10);\n    if (bbox.width > maxWidth) {\n      const newFontSize = fontSize * maxWidth / bbox.width;\n      text.attr(\"font-size\", newFontSize);\n      bbox.width = maxWidth; // Setting this to maxWidth works but it can be changed if needed\n    }\n\n    // Wrap text within the container's width\n    const words = sector.data.name.split(/\\s+/).reverse();\n    let line = [];\n    let lineNumber = 0;\n    const lineHeight = 1.1; // Adjust this value for line spacing\n    const dy = parseFloat(text.attr(\"y\"));\n    const lines = [];\n    let tspan = text.text(null).append(\"tspan\").attr(\"x\", sector.x0 + 7).attr(\"y\", dy).attr(\"dy\", `-${lineNumber * lineHeight}em`);\n    let word;\n    while (word = words.pop()) {\n      line.push(word);\n      tspan.text(line.join(\" \"));\n      if (tspan.node().getComputedTextLength() > bbox.width) {\n        line.pop();\n        tspan.text(line.join(\" \"));\n        lines.push(line);\n        line = [word];\n        tspan = text.append(\"tspan\").attr(\"x\", sector.x0 + 7).attr(\"y\", dy).attr(\"dy\", `-${++lineNumber * lineHeight}em`).text(word);\n      }\n    }\n    lines.push(line);\n\n    // Update the y attribute of the text based on the number of lines\n    const totalHeight = lineNumber * lineHeight;\n    const initialY = sector.y0 + 30;\n    const newDY = initialY - totalHeight / 2;\n    text.selectAll(\"tspan\").attr(\"dy\", function (_, i) {\n      return `-${(lineNumber - i) * lineHeight}em`;\n    }).attr(\"y\", function (_, i) {\n      return newDY + i * lineHeight;\n    });\n  });\n\n  // sets the stock ticker attributes for each tile\n  block.append('text').text(stock => {\n    return stock['data']['name'];\n  }).attr('class', 'label').attr('x', stock => (stock['x1'] - stock['x0']) / 3).attr('y', stock => (stock['y1'] - stock['y0']) / 2).style('fill', 'white').attr('font-size', stock => `${Math.min((stock['x1'] - stock['x0']) / 10, (stock['y1'] - stock['y0']) / 10)}px`);\n\n  // sets the daily percentage change for each tile under the stock ticker. y is being offset so it dosen't layer on top of the stock ticker\n  block.append('text').text(stock => {\n    return `${stock['data']['changesPercentage'].toFixed(2)}%`;\n  }).attr('class', 'label').attr('x', stock => (stock['x1'] - stock['x0']) / 3).attr('y', stock => (stock['y1'] - stock['y0']) / 2 + (stock['y1'] - stock['y0']) / 12.5).style('fill', 'white').attr('font-size', stock => `${Math.min((stock['x1'] - stock['x0']) / 10, (stock['y1'] - stock['y0']) / 10)}px`);\n\n  // sets the company logo for each stock tile. Can't get around 404 because this is not a fetch.\n  // default image - currently this does not work\n  const defaultImage = \"https://neighborhoodnode-seed.s3.us-west-1.amazonaws.com/blank_logo.png\";\n  block.append('image').attr('xlink:href', stock => `https://financialmodelingprep.com/image-stock/${stock['data']['name']}.png`).on(\"error\", function () {\n    d3.select(this).attr(\"xlink:href\", defaultImage);\n  }).attr('class', 'label').attr('x', stock => (stock['x1'] - stock['x0']) / 3).attr('y', stock => (stock['y1'] - stock['y0']) / 2 + (stock['y1'] - stock['y0']) / 12.5).attr('width', stock => (stock['x1'] - stock['x0']) / 3).attr('height', stock => (stock['y1'] - stock['y0']) / 3);\n\n  // Instructions title\n\n  // Get the size of the treemap canvas\n  let canvasWidth = d3.select('#treemapcanvas').node().clientWidth;\n\n  // Calculate the center coordinates of the canvas\n  let canvasCenterX = canvasWidth / 2;\n\n  // Draw the title\n  canvas.append(\"text\").attr('class', 'instructions-title').attr(\"x\", canvasCenterX).attr(\"y\", 30).text(\"Hover over a tile to see detailed information and click on a tile to zoom in\").attr(\"font-size\", \"16px\").attr(\"text-anchor\", \"middle\").style(\"fill\", \"white\").style(\"font-family\", \"'Roboto Slab', serif\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/treemap.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90cmFkZXJfcmFkYXIvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;